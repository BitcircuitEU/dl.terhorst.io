<VirtualHost *:80>
    ServerName dl.terhorst.io
    ServerAlias www.dl.terhorst.io
    
    # Redirect HTTP to HTTPS
    RewriteEngine On
    RewriteCond %{HTTPS} off
    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L]
</VirtualHost>

<VirtualHost *:443>
    ServerName dl.terhorst.io
    ServerAlias www.dl.terhorst.io
    
    # SSL Configuration (anpassen an Ihre SSL-Zertifikate)
    SSLEngine on
    SSLCertificateFile /path/to/your/ssl.crt
    SSLCertificateKeyFile /path/to/your/ssl.key
    # SSLCertificateChainFile /path/to/your/chain.crt  # Optional
    
    # Security Headers
    Header always set X-Frame-Options DENY
    Header always set X-Content-Type-Options nosniff
    Header always set X-XSS-Protection "1; mode=block"
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
    
    # Logs
    ErrorLog ${APACHE_LOG_DIR}/dl.terhorst.io_error.log
    CustomLog ${APACHE_LOG_DIR}/dl.terhorst.io_access.log combined
    
    # Document Root für statische Dateien (Images)
    DocumentRoot /mnt/onedrive/bootimages
    
    # Basic Authentication für Image Downloads
    <Directory "/mnt/onedrive/bootimages">
        AuthType Basic
        AuthName "Windows Images - dl.terhorst.io"
        AuthUserFile /etc/apache2/.htpasswd
        Require valid-user
        
        Options +Indexes +FollowSymLinks
        AllowOverride None
        
        # Schöne Directory-Listings
        IndexOptions FancyIndexing IconHeight=16 IconWidth=16 NameWidth=* DescriptionWidth=* HTMLTable SuppressIcon
        IndexIgnore .htaccess .htpasswd
        
        # MIME-Types für Windows-Images
        AddType application/octet-stream .iso
        AddType application/octet-stream .wim
        AddType application/zip .zip
        
        # Cache-Control für große ISO-Dateien
        <FilesMatch "\.(iso|wim)$">
            Header set Cache-Control "public, max-age=86400"
        </FilesMatch>
    </Directory>
    
    # Proxy für UUP Dump Frontend (Node.js App)
    <Location "/app">
        ProxyPreserveHost On
        ProxyPass http://localhost:3001/
        ProxyPassReverse http://localhost:3001/
        
        # WebSocket Support für Download-Progress
        ProxyPass /app/socket.io/ ws://localhost:3001/socket.io/
        ProxyPassReverse /app/socket.io/ ws://localhost:3001/socket.io/
        
        # Basic Auth auch für Frontend
        AuthType Basic
        AuthName "UUP Dump Frontend - dl.terhorst.io"
        AuthUserFile /etc/apache2/.htpasswd
        Require valid-user
    </Location>
    
    # API-Endpunkte (auch mit Auth)
    <LocationMatch "^/api">
        ProxyPreserveHost On
        ProxyPass http://localhost:3001
        ProxyPassReverse http://localhost:3001
        
        AuthType Basic
        AuthName "UUP Dump API - dl.terhorst.io"
        AuthUserFile /etc/apache2/.htpasswd
        Require valid-user
    </LocationMatch>
    
    # Haupt-Umleitung zur App
    RewriteEngine On
    RewriteRule ^/?$ /app/ [R=301,L]
    
    # Fehlerseiten
    ErrorDocument 401 /error/401.html
    ErrorDocument 403 /error/403.html
    ErrorDocument 404 /error/404.html
    ErrorDocument 500 /error/500.html
</VirtualHost>

# Alternative Konfiguration falls Sie den Node.js-Server direkt verwenden möchten
# Kommentieren Sie den obigen VirtualHost aus und verwenden Sie diesen:

#<VirtualHost *:443>
#    ServerName dl.terhorst.io
#    ServerAlias www.dl.terhorst.io
#    
#    # SSL Configuration
#    SSLEngine on
#    SSLCertificateFile /path/to/your/ssl.crt
#    SSLCertificateKeyFile /path/to/your/ssl.key
#    
#    # Alles an Node.js weiterleiten
#    ProxyPreserveHost On
#    ProxyPass / http://localhost:3001/
#    ProxyPassReverse / http://localhost:3001/
#    
#    # WebSocket Support
#    ProxyPass /socket.io/ ws://localhost:3001/socket.io/
#    ProxyPassReverse /socket.io/ ws://localhost:3001/socket.io/
#    
#    # Logs
#    ErrorLog ${APACHE_LOG_DIR}/dl.terhorst.io_error.log
#    CustomLog ${APACHE_LOG_DIR}/dl.terhorst.io_access.log combined
#</VirtualHost> 